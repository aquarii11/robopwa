{"version":3,"sources":["CounterButton.js","Header.js","Searchbox.js","Card.js","CardList.js","scroll.js","App.js","serviceWorker.js","registerServiceWorker.js","index.js"],"names":["CounterButton","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateCount","setState","State","count","state","console","log","nextProps","nextState","color","_this2","react_default","a","createElement","style","onClick","React","PureComponent","Header","className","src_CounterButton","Component","Searchbox","_ref","searchfield","searchChange","aria-label","type","placeholder","onChange","Card","id","name","email","alt","src","concat","CardList","robots","roboList","keys","map","i","src_Card","key","Scroll","overflowY","children","App","onsearchChange","event","target","value","fetch","then","response","json","users","_this3","length","filterRobots","filter","robot","toLowerCase","includes","src_Header","src_Searchbox","src_scroll","src_CardList","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.05fc182b.chunk.js","sourcesContent":["import React from 'react';\r\nclass CounterButton extends React.PureComponent\r\n{\r\n   constructor(props)\r\n   {\r\n      super(props);\r\n      this.state={\r\n         count:0\r\n      }\r\n   }\r\n\tshouldComponentUpdate(nextProps,nextState)\r\n   \t  {\r\n   \t  \t   console.log('ComponentUpdatenextProps',nextProps)\r\n            console.log('ComponentUpdatenextState',nextState)\r\n            if(nextState.count !== this.state.count)\r\n            {\r\n               return true\r\n            }\r\n            if(nextProps.color !== this.props.color)\r\n            {\r\n               return true\r\n            }\r\n            return false\r\n   \t  }\r\n   updateCount=()=>\r\n   {\r\n      this.setState((State)=>{return{count:this.state.count+1}},()=>console.log(this.state.count))\r\n   }\r\n   render()\r\n   {\r\n   \t  console.log('CounterButton')\r\n   \t  return <button style={{color:this.props.color}} onClick={()=>{this.updateCount()}}>Count:{this.state.count}</button>\r\n   \t  \r\n   }\r\n}\r\nexport default CounterButton;","import React from 'react';\r\nimport CounterButton from './CounterButton';\r\nclass Header extends React.Component\r\n{\r\n\tshouldComponentUpdate(nextProps,nextState)\r\n   \t  {\r\n   \t  \treturn false\r\n   \t  }\r\n   render()\r\n   {\r\n   \t  console.log('header')\r\n   \t  return (<div>\r\n   \t  \t        <h1 className=\"f1\">RoboFriends</h1>\r\n   \t  \t        <CounterButton color='red' />\r\n   \t  </div>)\r\n   \t  \r\n   }\r\n}\r\nexport default Header;","import React from 'react';\r\nconst Searchbox = ({searchfield,searchChange}) =>\r\n{\r\n\tconsole.log('SearchBox')\r\n\treturn(<div><input aria-label=\"Search Robot\"  className=\"tc pa2 br2 bg-lightest-blue\" type=\"search\" placeholder=\"Search Robots\" onChange={searchChange} /></div>)\r\n}\r\nexport default Searchbox;","import React from 'react';\r\nconst Card = ({id,name,email}) =>\r\n{\r\n\tconsole.log('Card')\r\n\treturn(\r\n\t\t    <div className=\"bg-light-green dib br3 pa3 ma2 grow shadow-5\">\r\n\t\t\t    \r\n\t\t\t       <img alt=\"robots\" src= {`https://robohash.org/${id}?size=200x200`} />\r\n\t\t\t    <div>\r\n\t\t            <h2>{name}</h2>\r\n\t\t            <h3>{email}</h3>\r\n\t\t        </div>\r\n\t        </div>\r\n\t           \r\n\t\t    )\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\nconst CardList = ({robots}) =>\r\n{\r\n\tconsole.log('CardList')\r\n   const roboList = Object.keys(robots).map((i) =>\r\n   {\r\n   \t   return(<Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email} />)\r\n   })\r\n   return(<div>{roboList}</div>)\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Scroll = (props) =>\r\n{\r\n\tconsole.log('Scroll')\r\n\tconsole.log(props)\r\n\treturn(<div style={{overflowY:'scroll'}}>{props.children}</div>)\r\n}\r\nexport default Scroll;\r\n","import React,{Component} from 'react';\nimport Header from './Header';\nimport './App.css';\nimport Searchbox from './Searchbox';\nimport CardList from './CardList';\nimport Scroll from './scroll';\n//import {robots} from './robots';\nclass App extends Component\n{\n\n  constructor()\n  {\n     super();\n     this.state = {\n        robots:[],\n        searchfield:''\n     }\n  }\n  onsearchChange = (event) =>\n  {\n\n    \n    this.setState({searchfield:event.target.value});\n    \n      \n    \n  }\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users').then(response =>\n    response.json() )\n    .then(users =>\n            this.setState({robots:users}))\n  }\n  render(){\n    if(this.state.robots.length === 0)\n    {\n      return(<div><h1>LOADING...</h1></div>)\n    }\n    else\n    {\n          const filterRobots = this.state.robots.filter(robot =>{\n      return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\n    })\n    return(<div className=\"bg-yellow tc\">\n            <Header />\n            <Searchbox searchChange={this.onsearchChange} />\n            <Scroll>\n                <CardList robots={filterRobots} />\n            </Scroll>\n            \n        </div>)\n\n    }\n    \n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n)\r\n\r\nexport default function register () {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location)\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (!isLocalhost) {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl)\r\n      } else {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW (swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.')\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.')\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker (swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      )\r\n    })\r\n}\r\n\r\nexport function unregister () {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister()\r\n    })\r\n  }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import logo from './logo.svg';\nimport './index.css';\nimport App from './App';\n// import MyComponent from './MyComponent';\n// import Section from './Section';\n// import CardList from './CardList';\n\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\nimport registerServiceWorker from './registerServiceWorker';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\nregisterServiceWorker();\n"],"sourceRoot":""}